# all out of action till they can tun in python as well...


#def searchtree(tree, query):
    #"Searches a tree with Tregex and returns matching terminals"
    #! echo "$tree" > "tmp.tree"
    #tregex_command = 'sh ./corpkit/tregex.sh -o -t \'' + query + '\' tmp.tree 2>/dev/null | grep -vP \'^\s*$\''
    #result = !$tregex_command
    #! rm "tmp.tree"
    #return result

#def quicktree(tree):
    #"""Return a visual representation of a parse tree in IPython"""
    #from nltk import Tree
    #from nltk.draw.util import CanvasFrame
    #from nltk.draw import TreeWidget
    #from IPython.display import display
    #from IPython.display import Image
    #parsed = Tree.fromstring(tree)
    #cf = CanvasFrame()
    #tc = TreeWidget(cf.canvas(),parsed)
    #cf.add_widget(tc,10,10) # (10,10) offsets
    #cf.print_to_file('tree.ps')
    #cf.destroy()
    #! convert tree.ps tree.png
    #! rm tree.ps
    #return Image(filename='tree.png')
    #! rm tree.png



# colls = collocates('test.csv')
# print colls

#def parsetree(tree):
#    """Parse a sentence and return a visual representation in IPython"""
#    from nltk import Tree
#    from nltk.draw.util import CanvasFrame
#    from nltk.draw import TreeWidget
#    from stat_parser import Parser
#    from IPython.display import display
#    from IPython.display import Image
#    parser = Parser()
#    parsed = parser.parse(sentence)
#    cf = CanvasFrame()
#    tc = TreeWidget(cf.canvas(),parsed)
#    cf.add_widget(tc,10,10) # (10,10) offsets
#    cf.print_to_file('tree.ps')
#    cf.destroy()
#    ! convert tree.ps tree.png
#    ! rm tree.ps
#    return Image(filename='tree.png')
#    ! rm tree.png